= Tool Chain =
== crosstool-ng ==
Option1: http://crosstool-ng.github.io/docs/introduction/

*Creating crosscompiler tool chain:*
	I need to do this. 

Option2: Download the toolchain from package manager(pacman) in arch linux. I 
have tested them and they are working just fine. I have downloaded the 
following tools. These tools are for 64 bit arm architecture board.
	aarch64-linux-gnu-gcc 	
	aarch64-linux-gnu-gdb
	aarch64-linux-gnu-glibc
	aarch64-linux-gnu-binutils
	aarch64-linux-gnu-linux-api-headers

= Compiling Kernel =
Follow the kernel compiling guide given on the raspberrypi website.

= Linux Kernel Module =
Linux supports dynamic insertion and removal of code from the kernel while the 
system is up and running. The code what we add and remove at run time is
called a kernel module.

Once the LKM is loaded into the linux kernel, you can start using new features
and functionalities exposed by the kernel module without even restarting the 
device.

LKM dynamically extends the functionality of the kernel by introducing new
features to the kernel such as security, device drivers, file system drivers,
system calls etc.(modular approach).

Support for LKM allows your embedded Linux systems to have only minimal base 
kernel image(less runtime storage) and optional device drivers and other 
features are supplied on demand via module insertion.

Example: when a hot-pluggable new device is inserted the device driver which
is an LKM gets loaded automatically to the kernel.

== Static and dynamic LKMs ==

*Static(y):*

	When you build a linux kernel, you can make your module statically linked 
	to the kernel image(module becomes part of the final linux kernel image).
	This method increases the size of the final linux kernel image. Since the 
	module is 'built-in' into the linux kernel image, you cannot 'unload' the 
	module. It occupies the memory permanently during run time.
	
*Dynamic(m):*

	When you build a linux kernel, these modules are NOT built into the final
	kernel image, and rather there are compiled and linked seperately to produce
	.ko files. You can dynamically load and unload these modules from the 
	kernel using user space programs such as insmod, modprobe, rmmod.
	
= User space Vs Kernel Space =

{{file:/home/basith/Pictures/l23_ldd1.png|kernelspace and userspace}}

*User Space:*
	 The code cannot access memory locations and can run only in user space.

*Kernel Space:*
	The code which is running in kernel space is called kernel level code. 
	It has access to things like memory etc. The kernel level code are linux 
	kernel, subsystems and LKMs.

= Kernel Program =

== Kernel Program Outline: ==

{{file:/home/basith/Pictures/l24_ldd1.png|Kernel Skeletal Program}}

== Header Section: ==

	#include <linux/module.h>
	Every kernel module should include this header file.
	
== Kernel header vs user-space header: ==

	Since you write a kernel module that is going to be executed in kernel 
	space, you should be using kernel headers, never include any user-space
	library headers like C std library header files.
	
	No user space library is linked to the kernel module.
	
	Most of the relevant kernel headers live in 
	linux_source_bse/include/linux/
	
== Code Section ==	
 {{{c
	/* This is module initialization entry point */
	
	static int __int my_kernel_module_init(void) {
		//Kernel's printf
		pr_info("Hello World !\n");
		return 0;
	}
	/* This is module clean-up entry point */
	static void __exit my_kernel_module_exit(void) {
		pr_info("Good bye world\n");
	}
}}}

== Module Initialization ==
Portotype: {{{c int fun_name(void); }}}

Must return a value; 0 for success, nonzero means module initialization
failed. So the module will not get loaded in the kernel.

This is an entry point to your module(like main). This function will get
called during boot time in the case of static modules.

In the case of dynamic modules, this function will get called during module
insertion.

There should be one module initialization entry point in the module.

You may do some initialization of devices.

Initialization of device private data structures.

Requesting memory dynamically for various kernel data structures and services.

Requesting for allocation of major-minor numbers.

Device file creation.

== Understanding the complex syntax ==
 {{{c
		/* This is module initialization entry point */

		static int __int my_kernel_module_init(void) {
			//Kernel's printf
			pr_info("Hello World !\n");
			return 0;
		}

		/* This is module clean-up entry point */
		static void __exit my_kernel_module_exit(void) {
			pr_info("Good bye world\n");
		}
}}}

=== Code Syntax Explanation ===
	{{{c
	
		[[static]]
		[[__init and __exit]]
		[[pr_info]]
	
	}}}
	
== Module Clean Up Function ==
Prototype
{{{c
		void fun_name(void);
}}}

This is an entry point when module is removed.

Since you cannot remove static modules, clean-up function will get called
only in the case of dynamic modules when it is removed using user space 
command such as rmmod.

If you write a module and you are sure that it will always be statically 
linked with the kernel, then there is no need to implement this function.

Even if your static module has a clean-up function, the kernel build_system
will remove it during the build process if there is an __ exit marker.

Typically you must do exact reverse operation what you had done in the 
module init function. undoing init function.

Free memory which are requested in init function.

De-init the devices or leave the driver in proper state.

== Module entry points registration ==

{{{c 
/* This is registration of above entry points with kernel */
module_init(my_kernel_module_init);
module_exit(my_kernel_module_exit);
}}}

These are the macros used to register your modules's init function and 
clean-up function with the kernel.

Here module_init/module_exit is not a function, but a macro defined in 
linux/module.h

For example, module_init() will add its parameter to the init entry point 
database of the kernel.

Module_exit() will add its parameter to exit entry point database of the kernel.

== Module Description ==	
{{{c
		/* This is descriptive information about the module */
		MODULE_LICENSE("GPL"); /* This is module adhers to GPL licensing */
		MODULE_AUTHOR("Abdul Basith");
		MODULE_DESCRIPTION("A kernel module to print some messages");
		MODULE_INFO(name, "string_value"); // MODULE_INFO(board, "beagle bone");
}}}

MODULE_LICENSE is a macro used by the kernel to announce its license type.

If you load module whose license parameter is non-GPL(General Public License), 
the kernel triggers warning of being tainted. Its way of kernel letting the
users and developers know its non-free license based module.

The developer community may ignore the bug reports you submit after loading
the proprietary licensed module.

The declared module license is also used to decide whether a given module
can have access to the small number of "GPL-only" symbols in the kernel.

Fo to linux/module.h to find out what are the allowed parameters which can 
be used with macro to load the module without tainting the kernel.

You can see the module information by running below command on the .ko file
arm-linux-gnueabihf-objdump -d -j .modinfo helloworld.ko
	
= Building a kernel Module =
1. {{file:/home/basith/Coding/kernel_programming/raspberrypi/custom_drivers/001hello_world/main.c}}

Kernel module can be built in 2 ways
	1. Statically linked against the kernel image
	2. Dynamically loadable.
		1. [[In tree module]](internal to the linux kernel tree)
		2. [[Out of tree module]](external to the linux kernel tree)

= Important Note =
When you are building out of tree(external) module, you need to have a 
complete and precompiled kernel source tree on your system.

The reason is, modules are linked against object files found in the kernel
source tree.

You cannot compile your module against one linux kernel version and load it
into the system, which is running kernel of different version. The module
load may not be successful, and even if it is successful you will encounter
run time issues with the symbols.

Thumb rule: "Have a precompiled linux kernel source tree on your machine and
build your module against that".

There are two ways to obtain a prebuilt kernel version.
	- Download kernel from your distributor and build it yourself
	- Install the linux-headers of the target linux kernel.

{{file:/home/basith/Pictures/l28_kernel_outoftree_command.png|kernel out of tree module}}
{{file:/home/basith/Pictures/l28_make_command_syntax1.png}}
{{file:/home/basith/Pictures/l28_make_command_syntax2.png}}
{{file:/home/basith/Pictures/l28_make_command_syntax3.png}} 
{{file:/home/basith/Pictures/l28_make_command_syntax4.png}}

= Compilation and testing of an LKM =
Program:
{{file:/home/basith/Coding/kernel_programming/raspberrypi/custom_drivers/001hello_world/main.c|main.c}}	

Makefile:
{{file:/home/basith/Coding/kernel_programming/raspberrypi/custom_drivers/001hello_world/Makefile|Makefile}}	
This makefile works for raspberrypi and host machine.
I had various issues with makefile and it wasnt creating the .ko file. The 
mistake I was doing was writing wrong syntax in makefile, like this
CROSS_COMPILER=aarch64-linux-gnu- instead of
CROSS_COMPILE=aarch64-linux-gnu-

To install a module use sudo insmod <module name> and to remove it use 
sudo rmmod <module name>
example: sudo insmod main.ko 

Use *dmesg* command to know if the module is loaded or unloaded.

use *scp* command to copy files from host to target machine via ssh connection
scp main.ko pi@192.168.1.45:/home/pi/driver. Here I'm copying main.ko file from
host machine to target machine(raspberrypi4). Target machine name is pi. 

== Debugging with printk ==
* printf is one of the best debugging tool we have in user-level applications.
* When you work in kernel space, you will not have any access to the C standard library to access functions
  like printf or scanf.
* kernel has its own printf like kernel API called printk, where the letter 'k' signifies kernel space
  printing.
  printk("Hello this is kernel code\n");
  printk("value of data1 = %d data = %d\n", d1, d2);
* When using printk, the message will go into the kernel ring buffer simply we call "kernel log", and we
  can print and control the kernel ring buffer using the command dmesg.
* So if you want to check the latest kernel messages, just run
  dmesg | tail -5
  dmesg | head -25
* The printk does not support floating-point formats(%e, %f, %g).
* Go to linux/Documentation/printk-formats.txt to know more printk format specifiers.

== Kernel log levels ==
Based on the kernel log level you can control the priority of your printk messages. There are 8 such log
levels. A lowe number indicates a higher priority. And the default printk log level or priority is usually
set to 4. i.e., KERN_WARNING
{{file:/home/basith/Pictures/kern_log.png|kernel log}}

The log level will be used by the kernel to understand the priority of the message. Based on the priority 
kernel decides whether the message should be presented to the user immediately, by priting directly on to 
the console.

* All kernel messages will have their own log level
* You may have to specify the log level while using printk
  printk("Hello this is kernel code running\n");
* In the above printk, there is no log level visible, but the kernel will addd the default log level set by the
  kernel config item.
  CONFIG_MESSAGE_LOGLEVEL_DEFAULT whose value is 4
* So, the above statement is equivalent to 
  printk(KERN_WARNING "Hello this is kernel code running\n");
  There is no comma between KERN_WARNING and the message in above statement.
* In menuconfig dialog box --> kernel hacking --> default kernel log level (You can set the log level here while 
  compiling kernel)

== Significance of kernel log level == 

printk(KERN_ALERT "Hello this action should be taken immediately\n");
printk(KERN_INFO "Hello this is just an information\n");

The kernel message log level will be compared with the current console log level. If the kernel message log level
is lower than the current console log level, then the message will be directly printed on the current console.

By default console log level will have the value of config item CONFIG_CONSOLE_LOGLEVEL_DEFAULT. its default value
is set to 7. You can change it via kernel menuconfig or running commands.

To know the current log level status just run
cat /proc/sys/kernel/printk

At run time you can change the log level values using the below command
echo 6 > /proc/sys/kernel/printk

There are also printk wrappers
{{file:/home/basith/Pictures/l33_printkwrapper.png|printkwrapper}}
Wrappers are in include/linux/printk.h
Example: 
In kernel source tree printk is in:
{{file:/home/basith/Coding/kernel_programming/raspberrypi/source/linux/include/linux/printk.h|printk}}

== Device Drivers ==
=== Introduction === 
* A device driver is a piece of code that configures and manages a device.
* The device driver code knows, how to configure the device, sending data to the device, and it knows how to process
  requests which originate from the device.
* When the device driver code is loaded into the operating system such as linux, it exposes interfaces to the 
  user-space so that the user application can communicate with the device. 
  {{file:/home/basith/Pictures/l34_devicedriver1.png|device driver 1}}
  {{file:/home/basith/Pictures/l34_devicedriver2.png|device driver 2}}
* Without the device driver, the OS/Application will not have a clear picture of how to deal with a device.

=== Character Driver(char driver) ===
* Character driver accesses data from the device sequentially. i.e., byte by byte(like a stream of characters) not
  as chunk of data.
* Sophisticated buffering strategies are usually not involved in char drivers. Because when you write 1 byte, it 
  directly goes to the device without any intermediate buffering, delayed write back, dirty buffer management.
* Char devices: sensors, RTC, keyboard, serial port, parallel port, etc.
  {{file:/home/basith/Pictures/l34_devicedriver3.png|character device driver}}

=== Block Driver(block driver) ===
* The device which handles data in chunks or blocks is called a block device.
* Block drivers are more complicated than char drivers because block drivers should implement advanced buffering 
  strategies to read and write to the block devices, and disk caches are involved.
* Examples: mass storage devices such as hard disks, SDMMC, Nand flash, USB camera, etc.

=== Device Files ===
* Devices are accessed as file in Unix/Linux systems.
* A device file is a special file or a node which gets populated in /dev directory during kernel boot time or 
  device/driver hot plug events.
* By using device file, user application and drivers communicate with each other.
* Device files are managed as part of VFS(virtual file system) subsystem of the kernel.
  {{file:/home/basith/Pictures/l34_devicedriver4.png|character device driver}}
* ls -l in /dev directory will list of character, block device files. c for char device and b for block device. 

=== Exercise: pseudo character driver ===
* Write a character driver to deal with a pseudo character device.
* The pseudo-device is a memory buffer of some size.
* The driver what you write must support reading, writing and seeking to this device.
* Test the driver functionality by running user-level command such as echo, dd, cat and by writing user level program.


Program
[[file:/home/basith/Coding/kernel_programming/raspberrypi/custom_drivers/002pseudo_char_driver/pcd.c]]

